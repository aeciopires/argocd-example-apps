# Default values for kube-pires.
serviceAccount:
  create: false

# -- Number of replicas. Used if autoscaling is false
replicaCount: 5

# -- Update strategy configurations
updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 6
    maxUnavailable: 0

# Docker images of example
# https://hub.docker.com/r/yeasy/simple-web
# https://hub.docker.com/r/paulbouwer/hello-kubernetes/
# https://github.com/paulbouwer/hello-kubernetes

image:
  # -- Docker image name
  repository: aeciopires/kube-pires
  # -- Pull policy of Docker image
  pullPolicy: IfNotPresent
  # -- Docker image tag
  tag: "1.0.0"

# -- List of dockerconfig secrets names to use when pulling images
imagePullSecrets: []

nameOverride: ""
fullnameOverride: ""

# -- Pod annotations configurations
podAnnotations: {}

# -- Pod security configurations
podSecurityContext: {}
  # fsGroup: 2000

# -- Security context configurations
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  # -- Type of service in Kubernetes cluster
  type: NodePort
  # -- Port of service in Kubernetes cluster
  port: 80

# Ingress configurations
ingress:
  # -- Enables Ingress
  enabled: false
  className: ""
  # -- Ingress annotations
  annotations:
    # Annotations to create loadbalancer in AWS of the type application for external access of the VPC
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/ssl-redirect: "443"
    alb.ingress.kubernetes.io/healthcheck-path: "/"
    alb.ingress.kubernetes.io/healthcheck-port: http
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:AWS_REGION:AWS_ACCOUNT:certificate/ID_ACM_CERTIFICATE
    alb.ingress.kubernetes.io/tags: Scost=kube-pires, Environment=testing, Terraform=true, Kubernetes=true
    # Annotations to use ngninx-ingress
    #kubernetes.io/ingress.class: nginx
    #kubernetes.io/tls-acme: "true"
  # -- Ingress hosts
  hosts:
    - host: kube-pires.aeciopires.com
      paths:
        - path: /
          pathType: Prefix
  # -- Ingress TLS configuration
  tls: []
  #  - secretName: kube-pires-tls
  #    hosts:
  #      - kube-pires.aeciopires.com

# -- Requests and limits of pod resources.
# See: [https://kubernetes.io/docs/concepts/configuration/manage-resources-containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers)
resources:
  limits:
    cpu: 200m
    memory: 256Mi
  requests:
    cpu: 5m
    memory: 5Mi

# -- Auto scaling configurations
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 20
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# -- Health check on creation pod
readinessProbe:
  # -- Path of health check of application
  path: /health
  # -- Number of seconds after the container has started before readiness
  initialDelaySeconds: 5
  # -- Specifies that the kubelet should perform a liveness probe every N seconds
  periodSeconds: 10
  # -- Number of seconds after which the probe times out
  timeoutSeconds: 5
  # -- Minimum consecutive successes for the probe to be considered successful after having failed
  successThreshold: 1
  # -- When a probe fails, Kubernetes will try failureThreshold times before giving up.
  # Giving up in case of liveness probe means restarting the container.
  # In case of readiness probe the Pod will be marked Unready
  failureThreshold: 3

# -- Healh check continuos
livenessProbe:
  # -- Path of health check of application
  path: /health
  # -- Number of seconds after the container has started before liveness
  initialDelaySeconds: 5
  # -- Specifies that the kubelet should perform a liveness probe every N seconds
  periodSeconds: 10
  # -- Number of seconds after which the probe times out
  timeoutSeconds: 5
  # -- Minimum consecutive successes for the probe to be considered successful after having failed
  successThreshold: 1
  # -- When a probe fails, Kubernetes will try failureThreshold times before giving up.
  # Giving up in case of liveness probe means restarting the container.
  # In case of readiness probe the Pod will be marked Unready
  failureThreshold: 3

# -- Node selector configurations
nodeSelector: {}

# -- Tolerations configurations
tolerations: []

# -- Affinity configurations
affinity: {}
#  podAntiAffinity:
#    requiredDuringSchedulingIgnoredDuringExecution:
#    - labelSelector:
#        matchLabels:
#          app.kubernetes.io/name: kube-pires
#      namespaces:
#      - kube-pires
#      topologyKey: kubernetes.io/hostname

# -- Configurations of the application. Create configMap and Secret for use in deployment as environment variable
mySecret:
  enabled: true
  mySecretLicenseKey: mysecurepassword2
  mySecretHighSecurity: "false"
  mySecretDistributedTracingEnabled: "true"

# -- Service monitor configurations
serviceMonitor:
  enabled: false
  additionalLabels: {}
  path: "/metrics"
  interval: "30s"
  scrapeTimeout: "10s"
  namespace: "kube-pires"
  namespaceSelector: {}

karpenter:
  # -- Enables support provisioner of Karpenter. Reference: https://karpenter.sh/.
  # Tested only using EKS cluster 1.25 in AWS with Karpenter 0.33.0.
  enabled: false
  # -- Name of cluster. Change the term CHANGE_HERE by EKS cluster name if you want to use Karpenter.
  # Example: testing-my-cluster
  clusterName: "CHANGE_HERE"
  # -- Tag of discovery with name of cluster used by Karpenter.
  # Change the term CHANGE_HERE by EKS cluster name if you want to use Karpenter.
  # The cluster name, security group and subnets must have this tag.
  tag: "karpenter.sh/discovery"
  # -- Karpenter adds tags to all resources it creates, including EC2 Instances, EBS volumes, and Launch Templates.
  # See details: https://karpenter.sh/v0.33/concepts/nodeclasses/#spectags
  resourceTags:
    Environment: testing
    Scost: kube-pires
    product: kube-pires
    customerid: p1t2r3e4g5
    shardid: sid1
  # -- Name of instanceProfile EKS cluster. Conflicts with karpenter.role. Must specify one of "role" or "instanceProfile" for Karpenter to launch nodes
  # Example: Karpenter-testing-my-cluster-2023120112554517810000001e
  instanceProfile:
    use: false
    name: "CHANGE_HERE"
  # -- Name of role EKS cluster. The Karpenter spec.instanceProfile field has been removed from the EC2NodeClass in favor
  # of the spec.role field. Karpenter is also removing support for the defaultInstanceProfile specified globally
  # in the karpenter-global-settings, making the spec.role field required for all EC2NodeClasses.
  # Karpenter will now auto-generate the instance profile in your EC2NodeClass, given the role that you specify.
  # If using the Karpenter Getting Started Guide to deploy Karpenter, you can use the karpenter-irsa-$CLUSTER_NAME-$ID role 
  # provisioned by that process (which is limited to 64 characters).
  # Example: karpenter-irsa-testing-my-cluster-2023120421433226760000001e
  role:
    use: true
    name: "CHANGE_HERE"
  # -- AMIFamily is a required field, dictating both the default bootstrapping logic for nodes provisioned 
  # through this EC2NodeClass but also selecting a group of recommended, latest AMIs by default.
  # Currently, Karpenter supports amiFamily values AL2, Bottlerocket, Ubuntu, Windows2019, Windows2022 and Custom.
  # GPUs are only supported by default with AL2 and Bottlerocket.
  # The AL2 amiFamily does not support ARM64 GPU instance type
  amiFamily: Bottlerocket
  # -- Resource limits constrain the total size of the cluster.
  # Limits prevent Karpenter from creating new instances once the limit is exceeded.
  limits:
    cpu: "2"
    memory: "8Gi"
  # -- Labels are arbitrary key-values that are applied to all nodes
  labels:
    karpenter: "true"
    app: "kube-pires"
  # -- Priority given to the NodePool when the scheduler considers which NodePool to select.
  # Higher weights indicate higher priority when comparing NodePools.
  # Specifying no weight is equivalent to specifying a weight of 0.
  weight: 10
  # -- Disruption section which describes the ways in which Karpenter can disrupt and replace Nodes.
  # Configuration in this section constrains how aggressive Karpenter can be with performing operations
  # like rolling Nodes due to them hitting their maximum lifetime (expiry) or scaling down nodes to reduce cluster cost
  disruption:
    # -- Describes which types of Nodes Karpenter should consider for consolidation.
    # If using 'WhenUnderutilized', Karpenter will consider all nodes for consolidation and attempt to remove or replace Nodes when it discovers that the Node is underutilized and could be changed to reduce cost
    # If using `WhenEmpty`, Karpenter will only consider nodes for consolidation that contain no workload pods
    consolidationPolicy: "WhenEmpty"
    # -- The amount of time Karpenter should wait after discovering a consolidation decision
    # This value can currently only be set when the consolidationPolicy is 'WhenEmpty'
    # You can choose to disable consolidation entirely by setting the string value 'Never' here
    consolidateAfter: "30s"
    # -- The amount of time a Node can live on the cluster before being removed
    # Avoiding long-running Nodes helps to reduce security vulnerabilities as well as to reduce the chance of issues that can plague Nodes with long uptimes such as file fragmentation or memory leaks from system processes
    # You can choose to disable expiration entirely by setting the string value 'Never' here
    expireAfter: "720h"
  # -- Requirements that constrain the parameters of provisioned nodes.
  # These requirements are combined with pod.spec.topologySpreadConstraints, pod.spec.affinity.nodeAffinity, pod.spec.affinity.podAffinity, and pod.spec.nodeSelector rules.
  # Operators { In, NotIn, Exists, DoesNotExist, Gt, and Lt } are supported.
  # https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#operators
  requirements:
    - key: "karpenter.k8s.aws/instance-category"
      operator: In
      values: ["c", "m", "r"]
    - key: "karpenter.k8s.aws/instance-cpu"
      operator: In
      values: ["2", "4", "8", "16", "32"]
    - key: "kubernetes.io/arch"
      operator: In
      values: ["amd64"]
    - key: kubernetes.io/os
      operator: In
      values: ["linux"]
    - key: "karpenter.sh/capacity-type"
      operator: In
      values: ["spot", "on-demand"]
  # -- Optional, configures IMDS for the instance
  metadataOptions:
    httpEndpoint: enabled
    httpProtocolIPv6: disabled
    httpPutResponseHopLimit: 2
    httpTokens: required


pdb:
  enabled: false
  maxUnavailable: 25%
